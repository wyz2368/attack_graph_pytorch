import attackgraph.rl.dqn
import attackgraph.rl.learner
import attackgraph.rl.learner_factory
import attackgraph.rl.modules.mlp
import attackgraph.rl.external_configurables
import attackgraph.empirical_game

# Evaluation.
evaluate_algorithm.train_attacker = True
evaluate_algorithm.n_processes = 1

# Learning algorithm ("DQN" or "DQNEncDec").
learner_factory.policy_type = "DQN"

Learner.gamma = 0.99
Learner.prioritized_replay = False
Learner.exploration_final_eps = 0.03
Learner.param_noise = False
Learner.train_freq = 1
Learner.print_freq = 250
Learner.checkpoint_freq = None
Learner.progress_bar = True
Learner.total_timesteps = 1000000
Learner.exploration_fraction = 0.3
Learner.target_network_update_freq = 500


# Policy.
DQN.lr = 5e-4
DQN.hidden_sizes = [256, 256]
DQN.grad_norm_clipping = None
DQN.gpu = None

DQNEncDec.q_lr = 5e-5
DQNEncDec.encoder_lr = 5e-5
DQNEncDec.grad_norm_clipping = 10
DQNEncDec.hidden_sizes = [256, 256]
DQNEncDec.state_embed_dim = 124
DQNEncDec.gpu = None


# Modules.
MLP.hidden_activation = @tanh


# Simulation.
EmpiricalGame.num_episodes = 250
EmpiricalGame.threshold = 0.11
